interface types {
    /// A connection to a message-exchange service (e.g., buffer, broker, etc.).
    resource client {
        connect: static func(name: string) -> result<client, error>;
    }
    
    /// Errors that can occur when using the messaging interface.
    variant error {
        /// The requested option is not authorized. This could be a topic it doesn't have
        /// permission to subscribe to, or a permission it doesn't have to perform a specific
        /// action. This error is mainly used when calling `update-config`.
        unauthorized,
        /// The request or operation timed out.
        timeout,
        /// An error occurred with the connection. Includes a message for additional context
        connection(string),
        /// A catch all for other types of errors
        other(string),
    }
  
    /// The topic of a message. This is also called subject, channel, or group in various messaging
    /// systems. What this value means is up to the implementation.
    type topic = string;
  
    /// Configuration includes a required list of topics the guest is subscribing to
    record config {
        topics: list<topic>,
    }
  
    /// A message with a binary payload and additional information
    resource message {
        constructor(topic: topic, data: list<u8>, content-type: option<string>, metadata: option<list<tuple<string, string>>>);
        /// The topic/subject/channel this message was received or should be sent on
        topic: func() -> topic;
        /// Set the topic/subject/channel this message should be sent on
        set-topic: func(topic: topic);
        /// An optional content-type describing the format of the data in the message. This is 
        /// sometimes described as the "format" type
        content-type: func() -> option<string>;
        /// Set the content-type describing the format of the data in the message. This is
        /// sometimes described as the "format" type
        set-content-type: func(content-type: string);
        /// An opaque blob of data
        data: func() -> list<u8>;
        /// Set the opaque blob of data for this message, discarding the old value
        set-data: func(data: list<u8>);
        /// Optional metadata (also called headers or attributes in some systems) attached to the
        /// message
        metadata: func() -> option<list<tuple<string, string>>>;
        /// Add a new key-value pair to the metadata, overwriting any existing value for the same key
        add-metadata: func(key: string, value: string);

        /// Completes/acks the message
        /// 
        /// A message can exist under several statuses:
        /// (1) available: the message is ready to be read,
        /// (2) acquired: the message has been sent to a consumer (but still exists in the queue),
        /// (3) accepted (result of complete): the message has been received and ACK-ed by a consumer and can be safely removed from the queue,
        /// (4) rejected (result of abandon): the message has been received and NACK-ed by a consumer, at which point it can be:
        ///         - deleted,
        ///         - sent to a dead-letter queue, or
        ///         - kept in the queue for further processing.
        complete: func() -> result<_, error>;

        /// Abandon/nacks the message
        /// 
        /// A message can exist under several statuses:
        /// (1) available: the message is ready to be read,
        /// (2) acquired: the message has been sent to a consumer (but still exists in the queue),
        /// (3) accepted (result of complete): the message has been received and ACK-ed by a consumer and can be safely removed from the queue,
        /// (4) rejected (result of abandon): the message has been received and NACK-ed by a consumer, at which point it can be:
        ///         - deleted,
        ///         - sent to a dead-letter queue, or
        ///         - kept in the queue for further processing.
        abandon: func() -> result<_, error>;
    }
}